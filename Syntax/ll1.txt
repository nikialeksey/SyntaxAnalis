main_program ::= 'data_type' [write current data type] name_var [verify name var][create var in semantic tree] {to R} description main_program | e
description ::= head_var EV ';' | [изменить тип текущей переменной на функцию][создать специальную вершину] {триада proc fun} '('[обнулить количество параметров] PEVF [записать количество параметров] {вывести tmp_stack} ')' body_function [выйти из блока] {триада endp fun}
EV ::= ',' name_var [verify name var][create var in semantic tree] {to R} head_var EV | e
head_var ::= '=' expression {создать триаду = } | e

PEVF ::= param [увеличить количество параметров] EVF | e
EVF ::= ',' param [увеличить количество параметров] EVF | e
param ::= 'data_type' name_var [verify name var][create var in semantic tree] {триада pop name_var to tmp_stack}

body_function ::= [создать специальную вершину] '{' enum_operator '}' [выйти из блока]
enum_operator ::= O enum_operator | e
O ::= operator | 'data_type' [write current data type] name_var [verify name var][create var in semantic tree] {to R} head_var EV ';'
operator ::= '{' enum_operator '}' | name_var [find var for assigning in tree] {to R} '=' expression {создать триаду = }';' | 'do' {генерируем метку, кладем ее в стек меток} operator 'while' '(' expression {сгенерировать test и переход на метку} ')' ';' {убрать метку из стека меток}| 'return' expression {сгенерировать return}';' | ';'

expression ::= A3 A31
A31 ::= '==' A3 {создать триаду == } {to R} A31 | '!=' A3 {создать триаду != } {to R} A31 | e

A3 ::= A4 A41
A41 ::= '<' A4 {создать триаду < } {to R} A41 | '>' A4 {создать триаду > } {to R} A41 | '<=' A4 {создать триаду <= } {to R} A41 | '>=' A4 {создать триаду >= } {to R} A41 | e

A4 ::= A5 A51
A51 ::= '+' A5 {создать триаду + } {to R} A51 | '-' A5 {создать триаду - } {to R} A51  e

A5 ::= A6 A61
A61 ::= '*' A6 {создать триаду * } {to R} A61 | '/' A6 {создать триаду / } {to R} A61 | '%' A6 {создать триаду % } {to R} A61 | e

A6 ::= '-' A7 {создать триаду унарную - } {to R} | '+' {создать триаду унарную + } {to R} A7 | A7 
A7 ::= '(' expression ')' | num10 {to R} | num16 {to R} | A710 
A710 ::= name_var [найти ноду с такой же лексемой] A7110
A7110 ::= [проверить, что найденная нода - функция]'('[обнулить количество параметров] EO [проверить количество параметров]')' {триада call fun}| [проверить, что найденная нода - переменная] {положить переменную в стек} e

EO ::= expression [увеличить количество параметров] {положить параметр в стек} enum_operand | e
enum_operand ::= ',' expression [увеличить количество параметров] {положить параметр в стек} enum_operand | e
